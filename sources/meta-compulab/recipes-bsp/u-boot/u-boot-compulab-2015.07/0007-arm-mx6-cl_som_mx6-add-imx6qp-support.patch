From 4e5ffb47a337aefaa0ccb340d0327d642764a995 Mon Sep 17 00:00:00 2001
From: Valentin Raevsky <valentin@compulab.co.il>
Date: Mon, 20 Mar 2017 14:25:16 +0200
Subject: [PATCH 07/19] arm: mx6: cl_som_mx6: add imx6qp support

Signed-off-by: Valentin Raevsky <valentin@compulab.co.il>
---
 arch/arm/cpu/armv7/mx6/ddr.c            |  85 +++++++++++
 arch/arm/include/asm/arch-mx6/mx6-ddr.h |  47 +++++-
 board/compulab/cm_fx6/cm_fx6.c          |   3 +
 board/compulab/cm_fx6/spl.c             | 243 +++++++++++++++++++++++++++++---
 4 files changed, 350 insertions(+), 28 deletions(-)

diff --git a/arch/arm/cpu/armv7/mx6/ddr.c b/arch/arm/cpu/armv7/mx6/ddr.c
index 86c8354..f2c8c71 100644
--- a/arch/arm/cpu/armv7/mx6/ddr.c
+++ b/arch/arm/cpu/armv7/mx6/ddr.c
@@ -147,6 +147,91 @@ void mx6dq_dram_iocfg(unsigned width,
 		mx6_ddr_iomux->dram_dqm7 = ddr->dram_dqm7;
 	}
 }
+
+void mx6dqp_dram_iocfg(unsigned width,
+		      const struct mx6dq_iomux_ddr_regs *ddr,
+		      const struct mx6dq_iomux_grp_regs *grp)
+{
+	volatile struct mx6dq_iomux_ddr_regs *mx6_ddr_iomux;
+	volatile struct mx6dq_iomux_grp_regs *mx6_grp_iomux;
+
+	mx6_ddr_iomux = (struct mx6dq_iomux_ddr_regs *)MX6DQ_IOM_DDR_BASE;
+	mx6_grp_iomux = (struct mx6dq_iomux_grp_regs *)MX6DQ_IOM_GRP_BASE;
+
+	/* DDR IO Type */
+	mx6_grp_iomux->grp_ddr_type = grp->grp_ddr_type;
+	mx6_grp_iomux->grp_ddrpke = grp->grp_ddrpke;
+
+	/* Clock */
+	mx6_ddr_iomux->dram_sdclk_0 = ddr->dram_sdclk_0;
+	mx6_ddr_iomux->dram_sdclk_1 = ddr->dram_sdclk_1;
+
+	/* Address */
+	mx6_ddr_iomux->dram_cas = ddr->dram_cas;
+	mx6_ddr_iomux->dram_ras = ddr->dram_ras;
+	mx6_grp_iomux->grp_addds = grp->grp_addds;
+
+	/* Control */
+	mx6_ddr_iomux->dram_reset = ddr->dram_reset;
+	//mx6_ddr_iomux->dram_sdcke0 = ddr->dram_sdcke0;
+	//mx6_ddr_iomux->dram_sdcke1 = ddr->dram_sdcke1;
+	mx6_ddr_iomux->dram_sdba2 = ddr->dram_sdba2;
+	mx6_ddr_iomux->dram_sdodt0 = ddr->dram_sdodt0;
+	mx6_ddr_iomux->dram_sdodt1 = ddr->dram_sdodt1;
+	mx6_grp_iomux->grp_ctlds = grp->grp_ctlds;
+
+	/* Data Strobes */
+	mx6_grp_iomux->grp_ddrmode_ctl = grp->grp_ddrmode_ctl;
+	mx6_ddr_iomux->dram_sdqs0 = ddr->dram_sdqs0;
+	mx6_ddr_iomux->dram_sdqs1 = ddr->dram_sdqs1;
+	if (width >= 32) {
+		mx6_ddr_iomux->dram_sdqs2 = ddr->dram_sdqs2;
+		mx6_ddr_iomux->dram_sdqs3 = ddr->dram_sdqs3;
+	}
+	if (width >= 64) {
+		mx6_ddr_iomux->dram_sdqs4 = ddr->dram_sdqs4;
+		mx6_ddr_iomux->dram_sdqs5 = ddr->dram_sdqs5;
+		mx6_ddr_iomux->dram_sdqs6 = ddr->dram_sdqs6;
+		mx6_ddr_iomux->dram_sdqs7 = ddr->dram_sdqs7;
+	}
+
+	/* Additional QuadPlus and DualPlus ADDR registers */
+	mx6_ddr_iomux->dram_addr02 = ddr->dram_addr02;
+	mx6_ddr_iomux->dram_addr03 = ddr->dram_addr03;
+	mx6_ddr_iomux->dram_addr04 = ddr->dram_addr04;
+	mx6_ddr_iomux->dram_addr05 = ddr->dram_addr05;
+	mx6_ddr_iomux->dram_addr06 = ddr->dram_addr06;
+	mx6_ddr_iomux->dram_addr07 = ddr->dram_addr07;
+	mx6_ddr_iomux->dram_addr08 = ddr->dram_addr08;
+	mx6_ddr_iomux->dram_addr09 = ddr->dram_addr09;
+
+	/* Data */
+	mx6_grp_iomux->grp_ddrmode = grp->grp_ddrmode;
+	mx6_grp_iomux->grp_b0ds = grp->grp_b0ds;
+	mx6_grp_iomux->grp_b1ds = grp->grp_b1ds;
+	if (width >= 32) {
+		mx6_grp_iomux->grp_b2ds = grp->grp_b2ds;
+		mx6_grp_iomux->grp_b3ds = grp->grp_b3ds;
+	}
+	if (width >= 64) {
+		mx6_grp_iomux->grp_b4ds = grp->grp_b4ds;
+		mx6_grp_iomux->grp_b5ds = grp->grp_b5ds;
+		mx6_grp_iomux->grp_b6ds = grp->grp_b6ds;
+		mx6_grp_iomux->grp_b7ds = grp->grp_b7ds;
+	}
+	mx6_ddr_iomux->dram_dqm0 = ddr->dram_dqm0;
+	mx6_ddr_iomux->dram_dqm1 = ddr->dram_dqm1;
+	if (width >= 32) {
+		mx6_ddr_iomux->dram_dqm2 = ddr->dram_dqm2;
+		mx6_ddr_iomux->dram_dqm3 = ddr->dram_dqm3;
+	}
+	if (width >= 64) {
+		mx6_ddr_iomux->dram_dqm4 = ddr->dram_dqm4;
+		mx6_ddr_iomux->dram_dqm5 = ddr->dram_dqm5;
+		mx6_ddr_iomux->dram_dqm6 = ddr->dram_dqm6;
+		mx6_ddr_iomux->dram_dqm7 = ddr->dram_dqm7;
+	}
+}
 #endif
 
 #if defined(CONFIG_MX6QDL) || defined(CONFIG_MX6DL) || defined(CONFIG_MX6S)
diff --git a/arch/arm/include/asm/arch-mx6/mx6-ddr.h b/arch/arm/include/asm/arch-mx6/mx6-ddr.h
index c49aa62..6b5b019 100644
--- a/arch/arm/include/asm/arch-mx6/mx6-ddr.h
+++ b/arch/arm/include/asm/arch-mx6/mx6-ddr.h
@@ -38,7 +38,8 @@ struct mmdc_p_regs {
 	u32 mdor;
 	u32 res2[3];
 	u32 mdasp;
-	u32 res3[240];
+	u32 res3[239];
+	u32 maarcr;
 	u32 mapsr;
 	u32 res4[254];
 	u32 mpzqhwctrl;
@@ -58,8 +59,12 @@ struct mmdc_p_regs {
 	u32 mprddlctl;
 	u32 res9;
 	u32 mpwrdlctl;
-	u32 res10[25];
+	u32 res10[15];
+	u32 mppdcmpr2;
+	u32 res11[9];
 	u32 mpmur0;
+	u32 res12;
+	u32 mpdccr;
 };
 
 #define MX6SX_IOM_DDR_BASE	0x020e0200
@@ -119,12 +124,21 @@ struct mx6dq_iomux_ddr_regs {
 	u32 dram_dqm3;
 	u32 dram_sdqs2;
 	u32 dram_dqm2;
-	u32 res2[16];
+	u32 res2[2];
+	u32 dram_addr02;
+	u32 dram_addr03;
+	u32 dram_addr04;
+	u32 dram_addr05;
+	u32 dram_addr06;
+	u32 dram_addr07;
+	u32 dram_addr08;
+	u32 dram_addr09;
+	u32 res3[6];
 	u32 dram_cas;
-	u32 res3[2];
+	u32 res4[2];
 	u32 dram_ras;
 	u32 dram_reset;
-	u32 res4[2];
+	u32 res5[2];
 	u32 dram_sdclk_0;
 	u32 dram_sdba2;
 	u32 dram_sdcke0;
@@ -132,7 +146,7 @@ struct mx6dq_iomux_ddr_regs {
 	u32 dram_sdcke1;
 	u32 dram_sdodt0;
 	u32 dram_sdodt1;
-	u32 res5;
+	u32 res6;
 	u32 dram_sdqs0;
 	u32 dram_dqm0;
 	u32 dram_sdqs1;
@@ -220,6 +234,24 @@ struct mx6sdl_iomux_grp_regs {
 	u32 res4;
 	u32 grp_b6ds;
 };
+/*
+* NoC scheduler registers - only on IMX6DQP
+*/
+#define MX6DQP_NOC_SCHED_BASE	0x00bb0000
+struct mx6dqp_noc_sched_regs {
+	u32 coreid;
+	u32 revid;
+	u32 ddrconf;
+	u32 ddrtiming;
+	u32 ddrmode;
+	u32 rlat;
+	u32 res1[4];
+	u32 ipu1;
+	u32 ipu2;
+	u32 res2[2];
+	u32 activate;
+	u32 res3[16];
+};
 
 /* Device Information: Varies per DDR3 part number and speed grade */
 struct mx6_ddr3_cfg {
@@ -284,6 +316,9 @@ struct mx6_mmdc_calibration {
 void mx6dq_dram_iocfg(unsigned width,
 		      const struct mx6dq_iomux_ddr_regs *,
 		      const struct mx6dq_iomux_grp_regs *);
+void mx6dqp_dram_iocfg(unsigned width,
+		      const struct mx6dq_iomux_ddr_regs *,
+		      const struct mx6dq_iomux_grp_regs *);
 void mx6sdl_dram_iocfg(unsigned width,
 		       const struct mx6sdl_iomux_ddr_regs *,
 		       const struct mx6sdl_iomux_grp_regs *);
diff --git a/board/compulab/cm_fx6/cm_fx6.c b/board/compulab/cm_fx6/cm_fx6.c
index a438e51..bcd52c3 100644
--- a/board/compulab/cm_fx6/cm_fx6.c
+++ b/board/compulab/cm_fx6/cm_fx6.c
@@ -796,6 +796,9 @@ void dram_init_banksize(void)
 		gd->bd->bi_dram[0].size = 0x70000000;
 		gd->bd->bi_dram[1].size = 0x7FF00000;
 		break;
+	default:
+	        gd->bd->bi_dram[0].size = 0xDEADBEEF;
+		break;
 	}
 }
 
diff --git a/board/compulab/cm_fx6/spl.c b/board/compulab/cm_fx6/spl.c
index ce79fbc..cb1ffdf 100644
--- a/board/compulab/cm_fx6/spl.c
+++ b/board/compulab/cm_fx6/spl.c
@@ -38,6 +38,58 @@ enum ddr_config {
  * calibration script and it works also in all our tests, so we leave
  * it as is at this point.
  */
+#define SOM_IMX6_QDP_DDR_IOMUX_CFG \
+	.dram_sdqs0	= 0x00000038, \
+	.dram_sdqs1	= 0x00000038, \
+	.dram_sdqs2	= 0x00000038, \
+	.dram_sdqs3	= 0x00000038, \
+	.dram_sdqs4	= 0x00000038, \
+	.dram_sdqs5	= 0x00000038, \
+	.dram_sdqs6	= 0x00000038, \
+	.dram_sdqs7	= 0x00000038, \
+	.dram_addr02	= 0x00018200, \
+	.dram_addr03	= 0x00008000, \
+	.dram_addr04	= 0x00018200, \
+	.dram_addr05	= 0x00018200, \
+	.dram_addr06	= 0x00018200, \
+	.dram_addr07	= 0x00018200, \
+	.dram_addr08	= 0x00018200, \
+	.dram_addr09	= 0x00018200, \
+	.dram_dqm0	= 0x00000038, \
+	.dram_dqm1	= 0x00000038, \
+	.dram_dqm2	= 0x00000038, \
+	.dram_dqm3	= 0x00000038, \
+	.dram_dqm4	= 0x00000038, \
+	.dram_dqm5	= 0x00000038, \
+	.dram_dqm6	= 0x00000038, \
+	.dram_dqm7	= 0x00000038, \
+	.dram_cas	= 0x00000038, \
+	.dram_ras	= 0x00000038, \
+	.dram_sdclk_0	= 0x00000038, \
+	.dram_sdclk_1	= 0x00000038, \
+	.dram_sdcke0	= 0x00003000, \
+	.dram_sdcke1	= 0x00003000, \
+	.dram_reset	= 0x00000038, \
+	.dram_sdba2	= 0x00000000, \
+	.dram_sdodt0	= 0x00000038, \
+	.dram_sdodt1	= 0x00000038,
+
+#define SOM_IMX6_QDP_GPR_IOMUX_CFG \
+	.grp_b0ds	= 0x00000038, \
+	.grp_b1ds	= 0x00000038, \
+	.grp_b2ds	= 0x00000038, \
+	.grp_b3ds	= 0x00000038, \
+	.grp_b4ds	= 0x00000038, \
+	.grp_b5ds	= 0x00000038, \
+	.grp_b6ds	= 0x00000038, \
+	.grp_b7ds	= 0x00000038, \
+	.grp_addds	= 0x00000038, \
+	.grp_ddrmode_ctl = 0x00020000, \
+	.grp_ddrpke	= 0x00000000, \
+	.grp_ddrmode	= 0x00020000, \
+	.grp_ctlds	= 0x00000038, \
+	.grp_ddr_type	= 0x000C0000,
+
 #define CM_FX6_DDR_IOMUX_CFG \
 	.dram_sdqs0	= 0x00000038, \
 	.dram_sdqs1	= 0x00000038, \
@@ -82,10 +134,13 @@ enum ddr_config {
 	.grp_ctlds	= 0x00000038, \
 	.grp_ddr_type	= 0x000C0000,
 
+
 static struct mx6sdl_iomux_ddr_regs ddr_iomux_s = { CM_FX6_DDR_IOMUX_CFG };
 static struct mx6sdl_iomux_grp_regs grp_iomux_s = { CM_FX6_GPR_IOMUX_CFG };
 static struct mx6dq_iomux_ddr_regs ddr_iomux_q = { CM_FX6_DDR_IOMUX_CFG };
 static struct mx6dq_iomux_grp_regs grp_iomux_q = { CM_FX6_GPR_IOMUX_CFG };
+static struct mx6dq_iomux_ddr_regs qp_ddr_iomux_q = { SOM_IMX6_QDP_DDR_IOMUX_CFG };
+static struct mx6dq_iomux_grp_regs qp_grp_iomux_q = { SOM_IMX6_QDP_GPR_IOMUX_CFG };
 
 static void spl_mx6s_dram_init(enum ddr_config dram_config, bool reset)
 {
@@ -253,6 +308,118 @@ static void spl_mx6q_dram_init(enum ddr_config dram_config, bool reset)
 	mmdc_p0->mdscr = 0x00000000;
 	udelay(100);
 }
+static void spl_mx6dqp_dram_init(enum ddr_config dram_config, bool reset)
+{
+	volatile struct mmdc_p_regs *mmdc_p0;
+	volatile struct mmdc_p_regs *mmdc_p1;
+	mmdc_p0 = (struct mmdc_p_regs *)MX6_MMDC_P0_MDCTL;
+	mmdc_p1 = (struct mmdc_p_regs *)MX6_MMDC_P1_MDCTL;
+
+	volatile struct mx6dqp_noc_sched_regs *noc_sched;
+	noc_sched = (struct mx6dqp_noc_sched_regs *)MX6DQP_NOC_SCHED_BASE;
+
+	if (reset)
+		mmdc_p0->mdmisc = 2;
+
+	mmdc_p0->mdscr  = 0x00008000;
+	while (!(mmdc_p0->mdscr & (1 << 14)))
+		;
+
+	mmdc_p0->mpzqhwctrl  = 0xA1390003;
+	/* Wait for ZQ_HW_FOR to finish the calibration on both MMDCs */
+	while (mmdc_p0->mpzqhwctrl & 0x00010000)
+		;
+
+	mmdc_p0->mpwldectrl0 = 0x0058005a;
+	mmdc_p0->mpwldectrl1 = 0x00560050;
+	mmdc_p1->mpwldectrl0 = 0x002a003e;
+	mmdc_p1->mpwldectrl1 = 0x000a0014;
+	mmdc_p0->mpdgctrl0   = 0x03680374;
+	mmdc_p0->mpdgctrl1   = 0x03440344;
+	mmdc_p1->mpdgctrl0   = 0x0338033c;
+	mmdc_p1->mpdgctrl1   = 0x03140270;
+	mmdc_p0->mprddlctl   = 0x42323a3e;
+	mmdc_p1->mprddlctl   = 0x3c3a3440;
+	mmdc_p0->mpwrdlctl   = 0x3a3a3c3e;
+	mmdc_p1->mpwrdlctl   = 0x463a4240;
+	mmdc_p0->mprddqby0dl = 0x33333333;
+	mmdc_p0->mprddqby1dl = 0x33333333;
+	mmdc_p0->mprddqby2dl = 0x33333333;
+	mmdc_p0->mprddqby3dl = 0x33333333;
+	mmdc_p1->mprddqby0dl = 0x33333333;
+	mmdc_p1->mprddqby1dl = 0x33333333;
+	mmdc_p1->mprddqby2dl = 0x33333333;
+	mmdc_p1->mprddqby3dl = 0x33333333;
+	mmdc_p0->mpdccr      = 0x24912489;
+	mmdc_p1->mpdccr      = 0x24914452;
+	mmdc_p0->mpmur0	     = 0x00000800;
+	mmdc_p1->mpmur0	     = 0x00000800;
+	/* MMDC init: in DDR3, 64-bit mode, only MMDC0 is initiated: */
+	mmdc_p0->mdpdc  = 0x00020036;
+	mmdc_p0->mdotc  = 0x09444040;
+	mmdc_p0->mdcfg0 = 0x8A8F79A5;
+	mmdc_p0->mdcfg1 = 0xFF738F64;
+	mmdc_p0->mdcfg2 = 0x01FF00DD;
+	mmdc_p0->mdmisc = 0x00091740;
+	mmdc_p0->mdscr  = 0x00008000;
+	while (!(mmdc_p0->mdscr & (1 << 14)))
+	          ;
+	mmdc_p0->mdrwd  = 0x000026d2;
+	mmdc_p0->mdor   = 0x008F1023;
+	//       	mmdc_p0->mdasp  = 0x00000027; /* this causes incorrect DRAM size detection */
+        mmdc_p0->maarcr = 0x14420000;
+
+	switch (dram_config) {
+	case DDR_16BIT_256MB:
+		mmdc_p0->mdctl = 0x83180000;
+		break;
+	case DDR_32BIT_512MB:
+		mmdc_p0->mdctl = 0x83190000;
+		break;
+	case DDR_64BIT_1GB:
+		mmdc_p0->mdctl = 0x831A0000;
+		break;
+	case DDR_64BIT_2GB:
+		mmdc_p0->mdctl = 0xC31A0000;
+		break;
+	case DDR_64BIT_4GB:
+		mmdc_p0->mdctl = 0xC41A0000;
+		break;
+	default:
+		puts("Tried to setup invalid DDR configuration\n");
+		hang();
+	}
+
+	mmdc_p0->mppdcmpr2 = 0x00400c58;
+
+	/* NoC DDR configuration register set 0x00BB0000 0x00BB003F */
+	noc_sched->ddrconf = 0x00000000;
+	noc_sched->ddrtiming = 0x2891E41A;
+	noc_sched->activate = 0x00000564;
+	noc_sched->rlat = 0x00000040;
+	noc_sched->ipu1 = 0x00000020;
+	noc_sched->ipu2 = 0x00000020;
+
+	mmdc_p0->mdscr = 0x00088032;
+	mmdc_p0->mdscr = 0x00008033;
+	mmdc_p0->mdscr = 0x00068031;
+	mmdc_p0->mdscr = 0x09408030;
+	mmdc_p0->mdscr = 0x04008040;
+
+	mmdc_p0->mdscr = 0x0008803A;
+	mmdc_p0->mdscr = 0x0000803B;
+	mmdc_p0->mdscr = 0x00068039;
+	mmdc_p0->mdscr = 0x09408038;
+	mmdc_p0->mdscr = 0x04008048;
+
+	mmdc_p0->mdref = 0x00007800;
+	mmdc_p0->mpodtctrl = 0x00022227;
+	mmdc_p1->mpodtctrl = 0x00022227;
+	mmdc_p0->mdpdc = 0x000255F6;
+	mmdc_p0->mapsr = 0x00001006;
+	mmdc_p0->mdscr = 0x00000000;
+	udelay(100);
+}
 
 static int cm_fx6_spl_dram_init(void)
 {
@@ -281,36 +448,68 @@ static int cm_fx6_spl_dram_init(void)
 		break;
 	case MXC_CPU_MX6D:
 	case MXC_CPU_MX6Q:
-		mx6dq_dram_iocfg(64, &ddr_iomux_q, &grp_iomux_q);
-
-		spl_mx6q_dram_init(DDR_64BIT_4GB, false);
-		bank1_size = get_ram_size((long int *)PHYS_SDRAM_1, 0x80000000);
-		if (bank1_size == 0x80000000)
-			return 0;
+		if (is_mx6dqp()) {
+			puts("DualPlus/QuadPlus CPU detected\n");
+			mx6dqp_dram_iocfg(64, &qp_ddr_iomux_q, &qp_grp_iomux_q);
+			spl_mx6dqp_dram_init(DDR_64BIT_4GB, false);
+			bank1_size = get_ram_size((long int *)PHYS_SDRAM_1, 0x80000000);
+			if (bank1_size == 0x80000000)
+				return 0;
 
-		if (bank1_size == 0x40000000) {
-			bank2_size = get_ram_size((long int *)PHYS_SDRAM_2,
+			if (bank1_size == 0x40000000) {
+				bank2_size = get_ram_size((long int *)PHYS_SDRAM_2,
 								0x80000000);
-			if (bank2_size == 0x40000000) {
+				if (bank2_size == 0x40000000) {
 				/* Don't do a full reset here */
-				spl_mx6q_dram_init(DDR_64BIT_2GB, false);
-			} else {
-				spl_mx6q_dram_init(DDR_64BIT_1GB, true);
+				    spl_mx6dqp_dram_init(DDR_64BIT_2GB, false);
+				} else {
+				    spl_mx6dqp_dram_init(DDR_64BIT_1GB, true);
+				}
+
+				return 0;
 			}
 
-			return 0;
-		}
+			spl_mx6dqp_dram_init(DDR_32BIT_512MB, true);
+			bank1_size = get_ram_size((long int *)PHYS_SDRAM_1, 0x80000000);
+			if (bank1_size == 0x20000000)
+				return 0;
 
-		spl_mx6q_dram_init(DDR_32BIT_512MB, true);
-		bank1_size = get_ram_size((long int *)PHYS_SDRAM_1, 0x80000000);
-		if (bank1_size == 0x20000000)
-			return 0;
+			spl_mx6dqp_dram_init(DDR_16BIT_256MB, true);
+			bank1_size = get_ram_size((long int *)PHYS_SDRAM_1, 0x80000000);
+			if (bank1_size == 0x10000000)
+				return 0;
+	        } else { //non QuadPlus or DualPlus SoC
+			puts("Dual/Quad CPU detected\n");
+			mx6dq_dram_iocfg(64, &ddr_iomux_q, &grp_iomux_q);
+			spl_mx6q_dram_init(DDR_64BIT_4GB, false);
+			bank1_size = get_ram_size((long int *)PHYS_SDRAM_1, 0x80000000);
+			if (bank1_size == 0x80000000)
+				return 0;
 
-		spl_mx6q_dram_init(DDR_16BIT_256MB, true);
-		bank1_size = get_ram_size((long int *)PHYS_SDRAM_1, 0x80000000);
-		if (bank1_size == 0x10000000)
-			return 0;
+			if (bank1_size == 0x40000000) {
+				bank2_size = get_ram_size((long int *)PHYS_SDRAM_2,
+								0x80000000);
+				if (bank2_size == 0x40000000) {
+				/* Don't do a full reset here */
+				    spl_mx6q_dram_init(DDR_64BIT_2GB, false);
+				} else {
+				    spl_mx6q_dram_init(DDR_64BIT_1GB, true);
+				}
+
+				return 0;
+			}
+
+			spl_mx6q_dram_init(DDR_32BIT_512MB, true);
+			bank1_size = get_ram_size((long int *)PHYS_SDRAM_1, 0x80000000);
+			if (bank1_size == 0x20000000)
+				return 0;
+
+			spl_mx6q_dram_init(DDR_16BIT_256MB, true);
+			bank1_size = get_ram_size((long int *)PHYS_SDRAM_1, 0x80000000);
+			if (bank1_size == 0x10000000)
+				return 0;
 
+                }
 		break;
 	}
 
-- 
1.9.1

