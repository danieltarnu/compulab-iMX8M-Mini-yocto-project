From 8100519f683cc604a8fdad484ee67fba946a29dd Mon Sep 17 00:00:00 2001
From: Ilya Ledvich <ilya@compulab.co.il>
Date: Thu, 22 Sep 2016 13:59:44 +0300
Subject: [PATCH 05/57] compulab: add a framework for board specific device
 tree adjustment

Add a board independent framework that allows Compulab devices to
adjust its Device Tree Blob (.dtb) before booting kernel.
This feature can be use for example by board families
which use same kernel image and device tree blob.
Following dtb adjustments are currently supported:
 - enable a dtb node
 - disable a dtb node
 - delete a dtb node
 - set a property in a dtb node
 - delete a property in a dtb node
In order to use this framework implement board specific routine
fdt_board_adjust(). The fdt_board_adjust() shell add required
adjustments using a set of APIs as below:
 - fdt_node_enabl()
 - fdt_node_disable()
 - fdt_node_delete()
 - fdt_prop_set()
 - fdt_prop_del()
Enable CONFIG_OF_BOARD_SETUP option in order to use this framework.

Signed-off-by: Ilya Ledvich <ilya@compulab.co.il>
---
 board/compulab/common/common.c | 202 +++++++++++++++++++++++++++++++++
 board/compulab/common/common.h |  32 ++++++
 2 files changed, 234 insertions(+)

diff --git a/board/compulab/common/common.c b/board/compulab/common/common.c
index bf2ac7bd7f..3cb0b856fc 100644
--- a/board/compulab/common/common.c
+++ b/board/compulab/common/common.c
@@ -58,3 +58,205 @@ void cl_usb_hub_deinit(int gpio)
 	gpio_free(gpio);
 }
 #endif
+
+#ifdef CONFIG_OF_BOARD_SETUP
+#include <fdt_support.h>
+#include <malloc.h>
+
+/* FDT nodes list */
+static struct list_head fdt_nodes;
+
+char *fdt_node_action_name[] = {
+	"NODE_ENABLE",
+	"NODE_DISABLE",
+	"NODE_DELETE",
+	"NODE_PROP_SET",
+	"NODE_PROP_DELETE",
+};
+
+static inline void fdt_node_list_create(void)
+{
+	INIT_LIST_HEAD(&fdt_nodes);
+}
+
+static struct list_head *fdt_node_list_get(void)
+{
+	static int initialized;
+
+	if (!initialized) {
+		fdt_node_list_create();
+		initialized = 1;
+	}
+
+	return &fdt_nodes;
+}
+
+static inline void fdt_node_prepare(struct fdt_node *node, const char *name,
+				    struct fdt_node_prop *prop,
+				    enum fdt_node_action action)
+{
+	memset(node, 0, sizeof(struct fdt_node));
+	node->name = name;
+	node->acton = action;
+	node->prop = prop;
+	INIT_LIST_HEAD(&node->list);
+}
+
+static void fdt_node_insert(struct fdt_node *node)
+{
+	struct list_head *fdt_node_list = fdt_node_list_get();
+
+	list_add_tail(&node->list, fdt_node_list);
+}
+
+static int fdt_node_add(const char *name, enum fdt_node_action action)
+{
+	struct fdt_node *node = NULL;
+
+	node = (struct fdt_node *)malloc(sizeof(struct fdt_node));
+	if (!node)
+		return -ENOMEM;
+
+	fdt_node_prepare(node, name, NULL, action);
+
+	fdt_node_insert(node);
+
+	return 0;
+}
+
+int fdt_node_enable(const char *name)
+{
+	return fdt_node_add(name, FDT_NODE_ENABLE);
+}
+
+int fdt_node_disable(const char *name)
+{
+	return fdt_node_add(name, FDT_NODE_DISABLE);
+}
+
+int fdt_node_delete(const char *name)
+{
+	return fdt_node_add(name, FDT_NODE_DELETE);
+}
+
+static int fdt_prop_add(const char *node, enum fdt_node_action action,
+			const char *name, void *val, int len,
+			int create)
+{
+	struct fdt_node *new = NULL;
+	struct fdt_node_prop *prop = NULL;
+
+	prop = (struct fdt_node_prop *)malloc(sizeof(struct fdt_node_prop)
+					      + len);
+	if (!prop)
+		return -ENOMEM;
+
+	memset(prop, 0, sizeof(struct fdt_node_prop));
+	prop->name = name;
+	if (action == FDT_NODE_PROP_SET) {
+		if (val)
+			memcpy(prop->val, val, len);
+		prop->len = len;
+		prop->create = create;
+	}
+
+	/* Prepare and populate node struct, insert to the list */
+	new = (struct fdt_node *)malloc(sizeof(struct fdt_node));
+	if (!new)
+		return -ENOMEM;
+
+	fdt_node_prepare(new, node, prop, action);
+
+	fdt_node_insert(new);
+
+	return 0;
+}
+
+int fdt_prop_set(const char *node, const char *name,
+		 void *val, int len, int create)
+{
+	return fdt_prop_add(node, FDT_NODE_PROP_SET, name,
+			    val, len, create);
+}
+
+int fdt_prop_del(const char *node, const char *name)
+{
+	return fdt_prop_add(node, FDT_NODE_PROP_DELETE, name,
+			    NULL, 0, 0);
+}
+
+int __weak fdt_board_adjust(void)
+{
+	return 0;
+}
+
+int __weak ft_board_setup(void *blob, bd_t *bd)
+{
+	struct list_head *fdt_nodes_list;
+	struct list_head *entry, *tmp;
+	struct fdt_node *node;
+	struct fdt_node_prop *prop;
+	int nodeoffset;
+
+	/* Resize FDT to be on the safe side */
+	fdt_shrink_to_minimum(blob);
+
+	/* Call board specific routine to populate the node list */
+	fdt_board_adjust();
+
+	/* Get node list */
+	fdt_nodes_list = fdt_node_list_get();
+
+	/* For each node check action to be done and apply required changes */
+	list_for_each_safe(entry, tmp, fdt_nodes_list) {
+		/* Get list entry */
+		node = list_entry(entry, struct fdt_node, list);
+		prop = node->prop;
+		debug("%s: get node: name %s, action %s\n",
+		      __func__, node->name, fdt_node_action_name[node->acton]);
+		if (node->acton >= FDT_NODE_PROP_SET) {
+			int i;
+			debug("%s: node prop name %s\n",
+			      __func__, node->prop->name);
+			debug("%s: prop val", __func__);
+			for (i = 0; i < node->prop->len; i++)
+				debug(" %02x", ((char *)(node->prop->val))[i]);
+			debug("\n");
+		}
+
+		switch (node->acton) {
+		case FDT_NODE_ENABLE:
+			fdt_status_okay_by_alias(blob, node->name);
+			break;
+		case FDT_NODE_DISABLE:
+			fdt_status_disabled_by_alias(blob, node->name);
+			break;
+		case FDT_NODE_DELETE:
+			fdt_del_node_and_alias(blob, node->name);
+			break;
+		case FDT_NODE_PROP_SET:
+			fdt_find_and_setprop(blob, node->name, prop->name,
+					     prop->val, prop->len,
+					     prop->create);
+			break;
+		case FDT_NODE_PROP_DELETE:
+			nodeoffset = fdt_path_offset(blob, node->name);
+			fdt_delprop(blob, nodeoffset, prop->name);
+			break;
+		default:
+			debug("%s: Error: unsupported node action\n",
+			      __func__);
+		}
+
+		/* Delete list entry */
+		list_del(entry);
+		/* Free memory allocated */
+		if (prop)
+			free(prop);
+
+		free(node);
+	}
+
+	return 0;
+}
+#endif
diff --git a/board/compulab/common/common.h b/board/compulab/common/common.h
index 759ec31317..329b75b27f 100644
--- a/board/compulab/common/common.h
+++ b/board/compulab/common/common.h
@@ -35,4 +35,36 @@ static inline int cl_omap3_smc911x_init(int id, int cs, u32 base_addr,
 }
 #endif /* CONFIG_SMC911X */
 
+#ifdef CONFIG_OF_BOARD_SETUP
+enum fdt_node_action {
+	FDT_NODE_ENABLE,
+	FDT_NODE_DISABLE,
+	FDT_NODE_DELETE,
+	FDT_NODE_PROP_SET,
+	FDT_NODE_PROP_DELETE,
+};
+
+struct fdt_node_prop {
+	const char *name;
+	int len;
+	int create;
+	char val[0];
+};
+
+struct fdt_node {
+	struct list_head list;
+	const char *name;
+	struct fdt_node_prop *prop;
+	enum fdt_node_action acton;
+};
+
+int fdt_board_adjust(void);
+int fdt_node_enable(const char *name);
+int fdt_node_disable(const char *name);
+int fdt_node_delete(const char *name);
+int fdt_prop_set(const char *node, const char *name,
+		 void *val, int len, int create);
+int fdt_prop_del(const char *node, const char *name);
+#endif
+
 #endif /* _CL_COMMON_ */
-- 
2.17.1

