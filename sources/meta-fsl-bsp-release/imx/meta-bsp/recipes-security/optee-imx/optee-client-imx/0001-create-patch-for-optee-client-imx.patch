From 7830bc96856d144d395dab41bc10173be4d4161e Mon Sep 17 00:00:00 2001
From: Ubuntu <ubuntu@ip-172-31-15-232.us-west-1.compute.internal>
Date: Wed, 5 Feb 2020 15:10:01 +0000
Subject: [PATCH] create patch for optee-client-imx

---
 libteec/src/teec_trace.c | 309 ++++++++++++++++++---------------------
 public/teec_trace.h      | 294 ++++++++++++++++++-------------------
 2 files changed, 289 insertions(+), 314 deletions(-)

diff --git a/libteec/src/teec_trace.c b/libteec/src/teec_trace.c
index 78b79d6..ac1ef86 100644
--- a/libteec/src/teec_trace.c
+++ b/libteec/src/teec_trace.c
@@ -1,167 +1,142 @@
-/*
- * Copyright (c) 2014, STMicroelectronics International N.V.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-#include <stdio.h>
-#include <stdarg.h>
-#include <stdint.h>
-#include <ctype.h>
-#include <pthread.h>
-
-#include <unistd.h>
-#include <sys/syscall.h>
-#include <sys/types.h>
-
-#include "teec_trace.h"
-
-#define MIN(x, y) (((x) < (y)) ? (x) : (y))
-
-/*
- * The length of the prefix is 37, for example it looks like this:
- * P = Prefix
- * M = Message
- * F = Function name
- * L = Line number
- * PPPP: MMMMM [FFFFFFFFFFFFFFF : LLLLL]
- */
-#define MAX_PRINT_SIZE 256
-#define MAX_FUNC_PRINT_SIZE 32
-
-#ifdef TEEC_LOG_FILE
-static void log_to_file(const char *buffer)
-{
-	FILE *log_file;
-	log_file = fopen(TEEC_LOG_FILE, "a");
-
-	if (log_file != NULL) {
-		fprintf(log_file, "%s", buffer);
-		fclose(log_file);
-		log_file = NULL;
-	}
-}
-#else
-#define log_to_file(buffer)
-#endif
-
-static const char * const trace_level_strings[] = {
-	"", "ERR", "INF", "DBG", "FLW"
-};
-
-int _dprintf(const char *function, int flen, int line, int level,
-	     const char *prefix, const char *fmt, ...)
-{
-	char raw[MAX_PRINT_SIZE];
-	char prefixed[MAX_PRINT_SIZE];
-	char *to_print = NULL;
-	const char *func;
-	int err;
-	va_list ap;
-
-	va_start(ap, fmt);
-	err = vsnprintf(raw, sizeof(raw), fmt, ap);
-	va_end(ap);
-
-	if (function) {
-#ifdef TRACE_FUNC_LENGTH_CST
-		char func_buf[MAX_FUNC_PRINT_SIZE];
-		/* Limit the function name to MAX_FUNC_PRINT_SIZE characters. */
-		strncpy(func_buf, function, flen > MAX_FUNC_PRINT_SIZE ?
-			(MAX_FUNC_PRINT_SIZE - 1) : flen);
-		if (flen < (MAX_FUNC_PRINT_SIZE - 1)) {
-			memset(func_buf + flen, 0x20,
-			       (MAX_FUNC_PRINT_SIZE - flen));
-		}
-		func_buf[MAX_FUNC_PRINT_SIZE - 1] = '\0';
-		func = func_buf;
-#else
-		(void)flen;
-		func = function;
-#endif
-
-		/*
-		 * pthread_self returns the POSIX tid which is different from
-		 * the kernel id
-		 */
-		int thread_id = syscall(SYS_gettid);	/* perf issue ? */
-
-		snprintf(prefixed, MAX_PRINT_SIZE,
-			 "%s [%d] %s:%s:%d: %s",
-			 trace_level_strings[level], thread_id, prefix, func,
-			 line, raw);
-		to_print = prefixed;
-	} else {
-		to_print = raw;
-	}
-
-	fprintf(stdout, "%s", to_print);
-
-	log_to_file(to_print);
-
-	return err;
-}
-
-#if (defined(DEBUGLEVEL_3) || defined(DEBUGLEVEL_true) || defined(DEBUGLEVEL_4))
-void dump_buffer(const char *bname, const uint8_t *buffer, size_t blen)
-{
-	fprintf(stderr, "#### %s\n", bname);
-
-	while (blen > 0) {
-		size_t n;
-
-		for (n = 0; n < 16; n++) {
-			if (n < blen)
-				fprintf(stderr, "%02x ", (int)buffer[n]);
-			else
-				fprintf(stderr, "   ");
-
-			if (n == 7)
-				fprintf(stderr, " ");
-		}
-
-		fprintf(stderr, " |");
-
-		for (n = 0; n < 16; n++) {
-			if (n < blen) {
-				if (isprint(buffer[n]))
-					fprintf(stderr, "%c", (int)buffer[n]);
-				else
-					fprintf(stderr, ".");
-			}
-		}
-
-		fprintf(stderr, "|\n");
-
-		blen -= MIN(blen, 16);
-		buffer += 16;
-	}
-}
-#else
-void dump_buffer(const char *bname, const uint8_t *buffer, size_t blen)
-{
-	(void)bname;
-	(void)buffer;
-	(void)blen;
-}
-#endif
+/*
+ * Copyright (c) 2014, STMicroelectronics International N.V.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+#include <stdio.h>
+#include <stdarg.h>
+#include <stdint.h>
+#include <ctype.h>
+#include <pthread.h>
+
+#include <unistd.h>
+#include <sys/syscall.h>
+#include <sys/types.h>
+
+#include "teec_trace.h"
+
+#define MIN(x, y) (((x) < (y)) ? (x) : (y))
+
+/*
+ * The length of the prefix is 37, for example it looks like this:
+ * P = Prefix
+ * M = Message
+ * F = Function name
+ * L = Line number
+ * PPPP: MMMMM [FFFFFFFFFFFFFFF : LLLLL]
+ */
+#define MAX_PRINT_SIZE 256
+
+#ifdef TEEC_LOG_FILE
+static void log_to_file(const char *buffer)
+{
+	FILE *log_file;
+	log_file = fopen(TEEC_LOG_FILE, "a");
+
+	if (log_file != NULL) {
+		fprintf(log_file, "%s", buffer);
+		fclose(log_file);
+		log_file = NULL;
+	}
+}
+#else
+#define log_to_file(buffer)
+#endif
+
+static const char * const trace_level_strings[] = {
+	"", "ERR", "INF", "DBG", "FLW"
+};
+
+void _dprintf(const char *function, int line, int level, const char *prefix,
+	      const char *fmt, ...)
+{
+	char msg[MAX_PRINT_SIZE];
+	int n = 0;
+	va_list ap;
+
+	if (function) {
+		int thread_id = syscall(SYS_gettid);
+
+		n = snprintf(msg, sizeof(msg), "%s [%d] %s:%s:%d: ",
+			trace_level_strings[level], thread_id, prefix,
+			function, line);
+		if (n < 0)
+			return;
+	}
+
+	if ((size_t)n < sizeof(msg)) {
+		va_start(ap, fmt);
+		n = vsnprintf(msg + n, sizeof(msg) - n, fmt, ap);
+		va_end(ap);
+		if (n < 0)
+			return;
+	}
+
+	fprintf(stdout, "%s", msg);
+	log_to_file(msg);
+}
+
+#if (defined(DEBUGLEVEL_3) || defined(DEBUGLEVEL_true) || defined(DEBUGLEVEL_4))
+void dump_buffer(const char *bname, const uint8_t *buffer, size_t blen)
+{
+	fprintf(stderr, "#### %s\n", bname);
+
+	while (blen > 0) {
+		size_t n;
+
+		for (n = 0; n < 16; n++) {
+			if (n < blen)
+				fprintf(stderr, "%02x ", (int)buffer[n]);
+			else
+				fprintf(stderr, "   ");
+
+			if (n == 7)
+				fprintf(stderr, " ");
+		}
+
+		fprintf(stderr, " |");
+
+		for (n = 0; n < 16; n++) {
+			if (n < blen) {
+				if (isprint(buffer[n]))
+					fprintf(stderr, "%c", (int)buffer[n]);
+				else
+					fprintf(stderr, ".");
+			}
+		}
+
+		fprintf(stderr, "|\n");
+
+		blen -= MIN(blen, 16);
+		buffer += 16;
+	}
+}
+#else
+void dump_buffer(const char *bname, const uint8_t *buffer, size_t blen)
+{
+	(void)bname;
+	(void)buffer;
+	(void)blen;
+}
+#endif
diff --git a/public/teec_trace.h b/public/teec_trace.h
index 28e290c..73794a1 100644
--- a/public/teec_trace.h
+++ b/public/teec_trace.h
@@ -1,147 +1,147 @@
-/*
- * Copyright (c) 2014, STMicroelectronics International N.V.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice,
- * this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
- * POSSIBILITY OF SUCH DAMAGE.
- */
-#ifndef TEEC_TRACE_H
-#define TEEC_TRACE_H
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-#include <string.h>
-#include <stdio.h>
-#include <stdint.h>
-
-#ifndef BINARY_PREFIX
-#error "BINARY_PREFIX not defined"
-#endif
-
-/*
- * Trace levels.
- *
- * ERROR is used when some kind of error has happened, this is most likely the
- * print you will use most of the time when you report some kind of error.
- *
- * INFO is used when you want to print some 'normal' text to the user.
- * This is the default level.
- *
- * DEBUG is used to print extra information to enter deeply in the module.
- *
- * FLOW is used to print the execution flox, typically the in/out of functions.
- *
- * */
-
-#define TRACE_ERROR  1
-#define TRACE_INFO   2
-#define TRACE_DEBUG  3
-#define TRACE_FLOW   4
-
-#if defined(DEBUGLEVEL_0) && !defined(DEBUGLEVEL)
-#define DEBUGLEVEL TRACE_ERROR
-#endif
-
-#if defined(DEBUGLEVEL_1) && !defined(DEBUGLEVEL)
-#define DEBUGLEVEL TRACE_ERROR
-#endif
-
-#if defined(DEBUGLEVEL_2) && !defined(DEBUGLEVEL)
-#define DEBUGLEVEL TRACE_INFO
-#endif
-
-#if defined(DEBUGLEVEL_3) && !defined(DEBUGLEVEL)
-#define DEBUGLEVEL TRACE_DEBUG
-#endif
-
-#if defined(DEBUGLEVEL_4) && !defined(DEBUGLEVEL)
-#define DEBUGLEVEL TRACE_FLOW
-#endif
-
-#ifndef DEBUGLEVEL
-/* Default debug level. */
-#define DEBUGLEVEL TRACE_INFO
-#endif
-
-/*
- * This define make sure that parameters are checked in the same manner as it
- * is done in the normal printf function.
- */
-#define __PRINTFLIKE(__fmt, __varargs) __attribute__\
-	((__format__(__printf__, __fmt, __varargs)))
-
-int _dprintf(const char *function, int flen, int line, int level,
-	     const char *prefix, const char *fmt, ...) __PRINTFLIKE(6, 7);
-
-#define dprintf(level, x...) do { \
-		if ((level) <= DEBUGLEVEL) { \
-			_dprintf(__func__, strlen(__func__), __LINE__, level, \
-				 BINARY_PREFIX, x); \
-		} \
-	} while (0)
-
-#define EMSG(fmt, ...)   dprintf(TRACE_ERROR, fmt "\n", ##__VA_ARGS__)
-#define IMSG(fmt, ...)   dprintf(TRACE_INFO, fmt "\n", ##__VA_ARGS__)
-#define DMSG(fmt, ...)   dprintf(TRACE_DEBUG, fmt "\n", ##__VA_ARGS__)
-#define FMSG(fmt, ...)   dprintf(TRACE_FLOW, fmt "\n", ##__VA_ARGS__)
-
-#define INMSG(fmt, ...)  FMSG("> " fmt, ##__VA_ARGS__)
-#define OUTMSG(fmt, ...) FMSG("< " fmt, ##__VA_ARGS__)
-#define OUTRMSG(r)                              \
-	do {                                            \
-		if (r)                                      \
-			EMSG("Function returns with [%d]", r);  \
-		OUTMSG("r=[%d]", r);                        \
-		return r;                                   \
-	} while (0)
-
-#define dprintf_raw(level, x...) do { \
-		if ((level) <= DEBUGLEVEL) \
-			_dprintf(0, 0, 0, (level), BINARY_PREFIX, x); \
-	} while (0)
-
-#define EMSG_RAW(fmt, ...)   dprintf_raw(TRACE_ERROR, fmt, ##__VA_ARGS__)
-#define IMSG_RAW(fmt, ...)   dprintf_raw(TRACE_INFO, fmt, ##__VA_ARGS__)
-#define DMSG_RAW(fmt, ...)   dprintf_raw(TRACE_DEBUG, fmt, ##__VA_ARGS__)
-#define FMSG_RAW(fmt, ...)   dprintf_raw(TRACE_FLOW, fmt, ##__VA_ARGS__)
-
-/*
- * This function will hex and ascii dump a buffer.
- *
- * Note that this function will only print if debug flag
- * DEBUGLEVEL is INFO or FLOOD.
- *
- * @param bname     Information string describing the buffer.
- * @param buffer    Pointer to the buffer.
- * @param blen      Length of the buffer.
- *
- * @return void
- */
-void dump_buffer(const char *bname, const uint8_t *buffer, size_t blen);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif
+/*
+ * Copyright (c) 2014, STMicroelectronics International N.V.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef TEEC_TRACE_H
+#define TEEC_TRACE_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <string.h>
+#include <stdio.h>
+#include <stdint.h>
+
+#ifndef BINARY_PREFIX
+#error "BINARY_PREFIX not defined"
+#endif
+
+/*
+ * Trace levels.
+ *
+ * ERROR is used when some kind of error has happened, this is most likely the
+ * print you will use most of the time when you report some kind of error.
+ *
+ * INFO is used when you want to print some 'normal' text to the user.
+ * This is the default level.
+ *
+ * DEBUG is used to print extra information to enter deeply in the module.
+ *
+ * FLOW is used to print the execution flox, typically the in/out of functions.
+ *
+ * */
+
+#define TRACE_ERROR  1
+#define TRACE_INFO   2
+#define TRACE_DEBUG  3
+#define TRACE_FLOW   4
+
+#if defined(DEBUGLEVEL_0) && !defined(DEBUGLEVEL)
+#define DEBUGLEVEL TRACE_ERROR
+#endif
+
+#if defined(DEBUGLEVEL_1) && !defined(DEBUGLEVEL)
+#define DEBUGLEVEL TRACE_ERROR
+#endif
+
+#if defined(DEBUGLEVEL_2) && !defined(DEBUGLEVEL)
+#define DEBUGLEVEL TRACE_INFO
+#endif
+
+#if defined(DEBUGLEVEL_3) && !defined(DEBUGLEVEL)
+#define DEBUGLEVEL TRACE_DEBUG
+#endif
+
+#if defined(DEBUGLEVEL_4) && !defined(DEBUGLEVEL)
+#define DEBUGLEVEL TRACE_FLOW
+#endif
+
+#ifndef DEBUGLEVEL
+/* Default debug level. */
+#define DEBUGLEVEL TRACE_INFO
+#endif
+
+/*
+ * This define make sure that parameters are checked in the same manner as it
+ * is done in the normal printf function.
+ */
+#define __PRINTFLIKE(__fmt, __varargs) __attribute__\
+	((__format__(__printf__, __fmt, __varargs)))
+
+void _dprintf(const char *function, int line, int level, const char *prefix,
+	      const char *fmt, ...) __PRINTFLIKE(5, 6);
+
+#define dprintf(level, x...) do { \
+		if ((level) <= DEBUGLEVEL) { \
+			_dprintf(__func__, __LINE__, level, \
+				 BINARY_PREFIX, x); \
+		} \
+	} while (0)
+
+#define EMSG(fmt, ...)   dprintf(TRACE_ERROR, fmt "\n", ##__VA_ARGS__)
+#define IMSG(fmt, ...)   dprintf(TRACE_INFO, fmt "\n", ##__VA_ARGS__)
+#define DMSG(fmt, ...)   dprintf(TRACE_DEBUG, fmt "\n", ##__VA_ARGS__)
+#define FMSG(fmt, ...)   dprintf(TRACE_FLOW, fmt "\n", ##__VA_ARGS__)
+
+#define INMSG(fmt, ...)  FMSG("> " fmt, ##__VA_ARGS__)
+#define OUTMSG(fmt, ...) FMSG("< " fmt, ##__VA_ARGS__)
+#define OUTRMSG(r)                              \
+	do {                                            \
+		if (r)                                      \
+			EMSG("Function returns with [%d]", r);  \
+		OUTMSG("r=[%d]", r);                        \
+		return r;                                   \
+	} while (0)
+
+#define dprintf_raw(level, x...) do { \
+		if ((level) <= DEBUGLEVEL) \
+			_dprintf(0, 0, (level), BINARY_PREFIX, x); \
+	} while (0)
+
+#define EMSG_RAW(fmt, ...)   dprintf_raw(TRACE_ERROR, fmt, ##__VA_ARGS__)
+#define IMSG_RAW(fmt, ...)   dprintf_raw(TRACE_INFO, fmt, ##__VA_ARGS__)
+#define DMSG_RAW(fmt, ...)   dprintf_raw(TRACE_DEBUG, fmt, ##__VA_ARGS__)
+#define FMSG_RAW(fmt, ...)   dprintf_raw(TRACE_FLOW, fmt, ##__VA_ARGS__)
+
+/*
+ * This function will hex and ascii dump a buffer.
+ *
+ * Note that this function will only print if debug flag
+ * DEBUGLEVEL is INFO or FLOOD.
+ *
+ * @param bname     Information string describing the buffer.
+ * @param buffer    Pointer to the buffer.
+ * @param blen      Length of the buffer.
+ *
+ * @return void
+ */
+void dump_buffer(const char *bname, const uint8_t *buffer, size_t blen);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
